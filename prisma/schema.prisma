generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InterviewType {
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  HR
}

enum InterviewStatus {
    STARTED
    RUNNING
    ENDED
}

model User {
  id       String       @id @default(uuid())  @db.Uuid()
  email    String    @unique
  name     String
  image    String? 
  password String?
  last_signed_at DateTime?
  accounts Account[]
  interviews Interview[]
}

model Account {
  id                String     @id @default(uuid()) @db.Uuid()
  userId            String    @db.Uuid()
  user              User    @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
  type              String
  refresh_token     String
  access_token      String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}
model Interview {
  id             String   @id @default(uuid()) @db.Uuid()
  userId         String   @db.Uuid()
  user           User     @relation(fields: [userId], references: [id])


  post           String   
  jobDescription String   // full JD text or summary
  resume         String?  // parsed resume text OR link to uploaded file
  interviewType  InterviewType @default(TECHNICAL)   // e.g. "technical", "behavioral", "system-design"
  duration       Int      // time control in minutes

  status         InterviewStatus   @default(STARTED) // scheduled | active | ended | completed
  startedAt      DateTime?
  endedAt        DateTime?

  transcript     Json?    // running transcript of Q&A
  feedbackreport       Json?    // AI feedback after interview (optional)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
